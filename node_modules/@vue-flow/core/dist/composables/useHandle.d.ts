import type { MaybeRef } from '@vueuse/core'
import type { Connection, Getters, GraphEdge, HandleType, ValidConnectionFunc } from '../types'
import type { ConnectionMode } from '../types'
interface Result {
  elementBelow: Element | null
  isValid: boolean
  connection: Connection
  isHoveringHandle: boolean
}
interface UseHandleProps {
  handleId: MaybeRef<string | null>
  nodeId: MaybeRef<string>
  type: MaybeRef<HandleType>
  isValidConnection?: ValidConnectionFunc
  elementEdgeUpdaterType?: MaybeRef<HandleType>
  onEdgeUpdate?: (connection: Connection) => void
  onEdgeUpdateEnd?: () => void
}
export declare const checkElementBelowIsValid: (
  event: MouseEvent | TouchEvent,
  connectionMode: ConnectionMode,
  isTarget: boolean,
  nodeId: string,
  handleId: string | null,
  isValidConnection: ValidConnectionFunc | undefined,
  doc: Document,
  edges: GraphEdge[],
  getNode: Getters['getNode'],
) => Result
/**
 * This composable can be used to create custom Handle components
 *
 * It provides an `onClick` and `onMouseDown` handler that you can bind to your custom handle, so it will behave like the default handle.
 *
 */
export default function useHandle({
  handleId,
  nodeId,
  isValidConnection,
  type,
  elementEdgeUpdaterType,
  onEdgeUpdateEnd,
  onEdgeUpdate,
}: UseHandleProps): {
  onMouseDown: (event: MouseEvent) => void
  onTouchStart: (event: TouchEvent) => void
  onClick: (event: MouseEvent) => void
}
export {}
