import {
  q,
  ue,
  vi,
  yi
} from "./chunk-3A64ZMUZ.js";
import {
  Teleport,
  computed,
  createBlock,
  createCommentVNode,
  createElementBlock,
  defineComponent,
  inject,
  mergeProps,
  openBlock,
  renderSlot,
  unref
} from "./chunk-QO6ZHO7P.js";
import "./chunk-RSJERJUL.js";

// node_modules/@vue-flow/node-toolbar/dist/vue-flow-node-toolbar.mjs
var E = {
  name: "NodeToolbar",
  inheritAttrs: false
};
var M = defineComponent({
  ...E,
  props: {
    nodeId: null,
    isVisible: { type: Boolean },
    position: { default: q.Top },
    offset: { default: 10 }
  },
  setup(y) {
    const t = y, x = inject(yi, null), { viewportRef: v, viewport: m, getSelectedNodes: b, findNode: g } = ue();
    function I(e, o, p, l) {
      let r = (e.x + e.width / 2) * o.zoom + o.x, n = e.y * o.zoom + o.y - l, c = -50, a = -100;
      switch (p) {
        case q.Right:
          r = (e.x + e.width) * o.zoom + o.x + l, n = (e.y + e.height / 2) * o.zoom + o.y, c = 0, a = -50;
          break;
        case q.Bottom:
          n = (e.y + e.height) * o.zoom + o.y + l, a = 0;
          break;
        case q.Left:
          r = e.x * o.zoom + o.x - l, n = (e.y + e.height / 2) * o.zoom + o.y, c = -100, a = -50;
          break;
      }
      return `translate(${r}px, ${n}px) translate(${c}%, ${a}%)`;
    }
    const i = computed(() => (Array.isArray(t.nodeId) ? t.nodeId : [t.nodeId || x || ""]).reduce((o, p) => {
      const l = g(p);
      return l && o.push(l), o;
    }, [])), z = computed(
      () => typeof t.isVisible == "boolean" ? t.isVisible : i.value.length === 1 && i.value[0].selected && b.value.length === 1
    ), w = computed(() => vi(i.value)), N = computed(() => Math.max(...i.value.map((e) => (e.computedPosition.z || 1) + 1))), _ = computed(() => ({
      position: "absolute",
      transform: I(w.value, m.value, t.position, t.offset),
      zIndex: N.value
    }));
    return (e, o) => (openBlock(), createBlock(Teleport, { to: unref(v) }, [
      unref(z) && unref(i).length ? (openBlock(), createElementBlock("div", mergeProps({ key: 0 }, e.$attrs, {
        style: unref(_),
        class: "vue-flow__node-toolbar"
      }), [
        renderSlot(e.$slots, "default")
      ], 16)) : createCommentVNode("", true)
    ], 8, ["to"]));
  }
});
export {
  M as NodeToolbar
};
//# sourceMappingURL=@vue-flow_node-toolbar.js.map
