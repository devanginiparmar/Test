import { defineComponent as f, inject as k, computed as s, openBlock as h, createBlock as $, Teleport as B, unref as d, createElementBlock as P, mergeProps as S, renderSlot as T, createCommentVNode as V } from "vue";
import { Position as u, NodeIdInjection as A, useVueFlow as j, getRectOfNodes as C } from "@vue-flow/core";
const E = {
  name: "NodeToolbar",
  inheritAttrs: !1
}, M = /* @__PURE__ */ f({
  ...E,
  props: {
    nodeId: null,
    isVisible: { type: Boolean },
    position: { default: u.Top },
    offset: { default: 10 }
  },
  setup(y) {
    const t = y, x = k(A, null), { viewportRef: v, viewport: m, getSelectedNodes: b, findNode: g } = j();
    function I(e, o, p, l) {
      let r = (e.x + e.width / 2) * o.zoom + o.x, n = e.y * o.zoom + o.y - l, c = -50, a = -100;
      switch (p) {
        case u.Right:
          r = (e.x + e.width) * o.zoom + o.x + l, n = (e.y + e.height / 2) * o.zoom + o.y, c = 0, a = -50;
          break;
        case u.Bottom:
          n = (e.y + e.height) * o.zoom + o.y + l, a = 0;
          break;
        case u.Left:
          r = e.x * o.zoom + o.x - l, n = (e.y + e.height / 2) * o.zoom + o.y, c = -100, a = -50;
          break;
      }
      return `translate(${r}px, ${n}px) translate(${c}%, ${a}%)`;
    }
    const i = s(() => (Array.isArray(t.nodeId) ? t.nodeId : [t.nodeId || x || ""]).reduce((o, p) => {
      const l = g(p);
      return l && o.push(l), o;
    }, [])), z = s(
      () => typeof t.isVisible == "boolean" ? t.isVisible : i.value.length === 1 && i.value[0].selected && b.value.length === 1
    ), w = s(() => C(i.value)), N = s(() => Math.max(...i.value.map((e) => (e.computedPosition.z || 1) + 1))), _ = s(() => ({
      position: "absolute",
      transform: I(w.value, m.value, t.position, t.offset),
      zIndex: N.value
    }));
    return (e, o) => (h(), $(B, { to: d(v) }, [
      d(z) && d(i).length ? (h(), P("div", S({ key: 0 }, e.$attrs, {
        style: d(_),
        class: "vue-flow__node-toolbar"
      }), [
        T(e.$slots, "default")
      ], 16)) : V("", !0)
    ], 8, ["to"]));
  }
});
export {
  M as NodeToolbar
};
