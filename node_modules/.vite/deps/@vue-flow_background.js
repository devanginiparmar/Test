import {
  ue
} from "./chunk-3A64ZMUZ.js";
import {
  computed,
  createBaseVNode,
  createCommentVNode,
  createElementBlock,
  defineComponent,
  normalizeStyle,
  openBlock,
  renderSlot,
  unref
} from "./chunk-QO6ZHO7P.js";
import "./chunk-RSJERJUL.js";

// node_modules/@vue-flow/background/dist/vue-flow-background.mjs
var x = ["x", "y", "width", "height"];
var C = ["stroke", "stroke-width", "d"];
var G = ["cx", "cy", "r", "fill"];
var b = {
  key: 2,
  height: "100",
  width: "100"
};
var O = ["fill"];
var S = ["x", "y", "fill"];
var B = {
  name: "Background"
};
var N = defineComponent({
  ...B,
  props: {
    variant: { default: () => "dots" },
    gap: { default: 10 },
    size: { default: 0.4 },
    patternColor: null,
    bgColor: null,
    height: { default: 100 },
    width: { default: 100 },
    x: { default: 0 },
    y: { default: 0 }
  },
  setup(e) {
    const v = {
      dots: "#81818a",
      lines: "#eee"
    }, { id: g, viewport: a } = ue(), t = computed(() => {
      const l = e.gap && e.gap * a.value.zoom, h = l && a.value.x % l, m = l && a.value.y % l, w = e.size * a.value.zoom;
      return {
        scaledGap: l,
        xOffset: h,
        yOffset: m,
        size: w
      };
    }), o = `pattern-${g}`, r = computed(() => e.patternColor || v[e.variant || "dots"]), y = computed(
      () => `M${t.value.scaledGap / 2} 0 V${t.value.scaledGap} M0 ${t.value.scaledGap / 2} H${t.value.scaledGap}`
    );
    return (l, h) => (openBlock(), createElementBlock("svg", {
      class: "vue-flow__background",
      style: normalizeStyle({
        height: `${e.height > 100 ? 100 : e.height}%`,
        width: `${e.width > 100 ? 100 : e.width}%`
      })
    }, [
      renderSlot(l.$slots, "pattern-container", { id: o }, () => [
        createBaseVNode("pattern", {
          id: o,
          x: t.value.xOffset,
          y: t.value.yOffset,
          width: t.value.scaledGap,
          height: t.value.scaledGap,
          patternUnits: "userSpaceOnUse"
        }, [
          renderSlot(l.$slots, "pattern", {}, () => [
            e.variant === "lines" ? (openBlock(), createElementBlock("path", {
              key: 0,
              stroke: unref(r),
              "stroke-width": e.size,
              d: unref(y)
            }, null, 8, C)) : e.variant === "dots" ? (openBlock(), createElementBlock("circle", {
              key: 1,
              cx: t.value.size,
              cy: t.value.size,
              r: t.value.size,
              fill: unref(r)
            }, null, 8, G)) : createCommentVNode("", true),
            e.bgColor ? (openBlock(), createElementBlock("svg", b, [
              createBaseVNode("rect", {
                width: "100%",
                height: "100%",
                fill: e.bgColor
              }, null, 8, O)
            ])) : createCommentVNode("", true)
          ])
        ], 8, x)
      ]),
      createBaseVNode("rect", {
        x: e.x,
        y: e.y,
        width: "100%",
        height: "100%",
        fill: `url(#${o})`
      }, null, 8, S),
      renderSlot(l.$slots, "default", { id: o })
    ], 4));
  }
});
var V = ((e) => (e.Lines = "lines", e.Dots = "dots", e))(V || {});
export {
  N as Background,
  V as BackgroundVariant
};
//# sourceMappingURL=@vue-flow_background.js.map
