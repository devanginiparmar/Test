import { defineComponent as k, computed as i, openBlock as n, createElementBlock as s, normalizeStyle as z, renderSlot as d, createElementVNode as u, unref as c, createCommentVNode as f } from "vue";
import { useVueFlow as $ } from "@vue-flow/core";
const x = ["x", "y", "width", "height"], C = ["stroke", "stroke-width", "d"], G = ["cx", "cy", "r", "fill"], b = {
  key: 2,
  height: "100",
  width: "100"
}, O = ["fill"], S = ["x", "y", "fill"], B = {
  name: "Background"
}, N = /* @__PURE__ */ k({
  ...B,
  props: {
    variant: { default: () => "dots" },
    gap: { default: 10 },
    size: { default: 0.4 },
    patternColor: null,
    bgColor: null,
    height: { default: 100 },
    width: { default: 100 },
    x: { default: 0 },
    y: { default: 0 }
  },
  setup(e) {
    const v = {
      dots: "#81818a",
      lines: "#eee"
    }, { id: g, viewport: a } = $(), t = i(() => {
      const l = e.gap && e.gap * a.value.zoom, h = l && a.value.x % l, m = l && a.value.y % l, w = e.size * a.value.zoom;
      return {
        scaledGap: l,
        xOffset: h,
        yOffset: m,
        size: w
      };
    }), o = `pattern-${g}`, r = i(() => e.patternColor || v[e.variant || "dots"]), y = i(
      () => `M${t.value.scaledGap / 2} 0 V${t.value.scaledGap} M0 ${t.value.scaledGap / 2} H${t.value.scaledGap}`
    );
    return (l, h) => (n(), s("svg", {
      class: "vue-flow__background",
      style: z({
        height: `${e.height > 100 ? 100 : e.height}%`,
        width: `${e.width > 100 ? 100 : e.width}%`
      })
    }, [
      d(l.$slots, "pattern-container", { id: o }, () => [
        u("pattern", {
          id: o,
          x: t.value.xOffset,
          y: t.value.yOffset,
          width: t.value.scaledGap,
          height: t.value.scaledGap,
          patternUnits: "userSpaceOnUse"
        }, [
          d(l.$slots, "pattern", {}, () => [
            e.variant === "lines" ? (n(), s("path", {
              key: 0,
              stroke: c(r),
              "stroke-width": e.size,
              d: c(y)
            }, null, 8, C)) : e.variant === "dots" ? (n(), s("circle", {
              key: 1,
              cx: t.value.size,
              cy: t.value.size,
              r: t.value.size,
              fill: c(r)
            }, null, 8, G)) : f("", !0),
            e.bgColor ? (n(), s("svg", b, [
              u("rect", {
                width: "100%",
                height: "100%",
                fill: e.bgColor
              }, null, 8, O)
            ])) : f("", !0)
          ])
        ], 8, x)
      ]),
      u("rect", {
        x: e.x,
        y: e.y,
        width: "100%",
        height: "100%",
        fill: `url(#${o})`
      }, null, 8, S),
      d(l.$slots, "default", { id: o })
    ], 4));
  }
});
var V = /* @__PURE__ */ ((e) => (e.Lines = "lines", e.Dots = "dots", e))(V || {});
export {
  N as Background,
  V as BackgroundVariant
};
